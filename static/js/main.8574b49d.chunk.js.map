{"version":3,"sources":["Weather.jsx","App.js","reportWebVitals.js","index.js"],"names":["Weather","useState","city_name","setCity_name","search","setSearch","weath","setweath","Wind","setWind","TimeZone","setTimeZone","SunTime","setSunTime","Time","Date","DateNow","getDate","Week","getDay","Month","getMonth","Year","getFullYear","useEffect","fetch","then","data","json","JsonData","console","log","main","weather","wind","sys","runTime1","timezone","timeZone","TimeNew","localTime","getTime","localOffset","getTimezoneOffset","finalTime","toLocaleTimeString","className","Math","floor","temp","src","icon","alt","description","humidity","pressure","temp_max","temp_min","speed","sunrise","sunset","type","id","autoFocus","placeholder","onChange","e","target","value","onClick","recognition","window","SpeechRecognition","webkitSpeechRecognition","onstart","document","getElementById","style","color","background","onspeechend","onresult","event","VoiceVal","results","transcript","substr","replace","newVal","start","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8574b49d.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport './Weather.css'\r\n\r\nconst Weather=()=>{\r\n// --------------------------Voice-----------------\r\n\r\nlet VoiceRun = ()=>{\r\n\r\n    let SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n\r\nlet recognition = new SpeechRecognition();\r\n\r\nrecognition.onstart = ()=>{\r\n\r\nconsole.log(\"Active Mic....\");\r\ndocument.getElementById(\"listen\").style.color=\"#00000047\";\r\ndocument.getElementById(\"listen\").style.background=\"rgb(153, 142, 142)\";\r\n}\r\n\r\nrecognition.onspeechend = ()=>{\r\n\r\ndocument.getElementById(\"listen\").style.color=\"#fff\";\r\ndocument.getElementById(\"listen\").style.background=\"none\";\r\n    console.log(\"Stop Mic\");\r\n\r\n}\r\n\r\nrecognition.onresult = (event)=>{\r\n\r\n    console.log(event);\r\n\r\n\r\n\r\n    let VoiceVal = event.results[0][0].transcript;\r\n    console.log(\"Your Saying : \"+VoiceVal);\r\n    \r\n     \r\nconsole.log(VoiceVal.substr(-1));\r\n\r\nif(VoiceVal.substr(-1)===\".\"){\r\n    console.log(\"true\");\r\n    console.log(VoiceVal.replace(\".\",\"\"));\r\n    let newVal = VoiceVal.replace(\".\",\"\");\r\n    console.log(\"Filter : \"+ newVal)\r\n    setSearch(newVal);\r\n    document.getElementById(\"input\").value=newVal;\r\n}\r\n\r\n\r\n else{\r\n    document.getElementById(\"input\").value=VoiceVal;\r\n    setSearch(VoiceVal);\r\n }\r\n\r\n}\r\n\r\nrecognition.start();\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet Iconq=\"http://openweathermap.org/img/w/\";\r\nconst [city_name, setCity_name] = useState('');\r\nconst [search, setSearch] = useState(\"Delhi\");\r\nconst [weath, setweath] = useState(\"\")\r\nconst [Wind, setWind] = useState(\"\")\r\nconst [TimeZone, setTimeZone] = useState();\r\nconst [SunTime, setSunTime] = useState();\r\n\r\n\r\n\r\nlet Time = new Date();\r\nlet WeekArr = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\r\nlet MonthArr = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\r\nlet DateNow = Time.getDate();\r\nlet Week = Time.getDay();\r\nlet Month = Time.getMonth();\r\nlet Year = Time.getFullYear();\r\n\r\n\r\n\r\nuseEffect(()=>{\r\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=bfd584ae593b3418ac88183b788f8213`).then(data=>data.json()).then((JsonData)=>{\r\n    \r\nconsole.log(JsonData,\"Fetch-Data\");setCity_name(JsonData.main);setweath(JsonData.weather);setWind(JsonData.wind);setSunTime(JsonData.sys);runTime1(JsonData.timezone);\r\n    }); \r\n},[search]);\r\n\r\n\r\n\r\nlet runTime1 = (timeZone) =>{\r\n    if(timeZone!==\"Invalid Date\"  && timeZone!==\"\"){}\r\n    let TimeNew = new Date();\r\n    let localTime = TimeNew.getTime()\r\n    let localOffset = TimeNew.getTimezoneOffset() * 60000\r\n    let utc = localTime + localOffset\r\n    var atlanta = utc + (1000 * (timeZone));\r\n    let nd = new Date(atlanta)\r\n    let finalTime = nd.toLocaleTimeString();\r\n   setTimeZone(finalTime)\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst onInput = (e) =>{\r\n    setSearch(e.target.value);\r\n}\r\n\r\n\r\nreturn(<>\r\n\r\n\r\n\r\n<div className=\"box\">\r\n   \r\n\r\n    <div className=\"box_below\">\r\n\r\n    {!city_name ? (\r\n\r\n<p className=\"error\">No Data Found</p>\r\n) : (\r\n<>\r\n\r\n<div className=\"first\">\r\n    <h3 className=\"day\"> {WeekArr[Week]}</h3>\r\n    <h3 className=\"date\"><i className=\"far fa-calendar-alt\"></i> {DateNow} {MonthArr[Month]} {Year}</h3>\r\n    <h3 className=\"date\">\r\n        {/* {(Hour+ 24) % 12 || 12}:{Minute} */}\r\n        {TimeZone} \r\n         {/* {Hour >12 ? (<>PM</>):(<>AM</>)} */}\r\n         </h3>\r\n    <h2 className=\"name\">\r\n    {search}\r\n</h2></div>\r\n<div className=\"sec\">\r\n    \r\n<h4 className=\"name_title\">\r\n{Math.floor(city_name.temp)}&#8451; \r\n    {!Wind ? (<p></p>):(<img src={Iconq + weath[0].icon + \".png\"} alt=\"\" />)}\r\n</h4>\r\n{!weath? (\r\n<p>dfg</p>\r\n\r\n): (<><p className=\"name_des\">{weath[0].description } </p>\r\n</>)\r\n}\r\n\r\n\r\n</div>\r\n\r\n{/* <p>{city_name.temp_min} | {city_name.temp_max}</p> */}\r\n</>\r\n)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n</div>\r\n<div className=\"slide_box\">\r\n   <div className=\"third\">\r\n       <h3 className=\"report\">Report For Today</h3>\r\n   {!city_name ? (<p className=\"error\">No Data Found!</p>):(<>  \r\n    <h4 className=\"hum\"><span><i className=\"fa fa-tint\" aria-hidden=\"true\"></i> Humanity</span>  <span>{city_name.humidity}%</span></h4>\r\n    <h4 className=\"hum\"><span><i className=\"fa fa-tachometer\" aria-hidden=\"true\"></i> Pressure</span>  <span>{city_name.pressure}mb</span></h4>\r\n    <h4 className=\"hum\"><span><i className=\"fa fa-thermometer-full\" aria-hidden=\"true\"></i> Max Temp.</span>  <span>{city_name.temp_max}&#8451; </span></h4>\r\n    <h4 className=\"hum\"><span><i className=\"fa fa-thermometer-quarter\" aria-hidden=\"true\"></i> Min Temp.</span>  <span>{city_name.temp_min}&#8451; </span></h4>\r\n   </>)}  \r\n    {!Wind ? (<p></p>):(<h4 className=\"hum\"><span><i className=\"fad fa-wind\"></i> Wind</span>  <span>{Wind.speed}KMH</span></h4>)}\r\n   {!SunTime ? (<p></p>):(<h4 className=\"hum\"><span><i className=\"fal fa-sunrise\"></i> Sun Rised</span>  <span>{new Date((SunTime.sunrise)*1000).toLocaleTimeString()}</span></h4>)}\r\n   {!SunTime ? (<p></p>):(<h4 className=\"hum\"><span><i className=\"fal fa-sunset\"></i> Sun Set</span>  <span>{new Date((SunTime.sunset)*1000).toLocaleTimeString()}</span></h4>)}\r\n   </div>\r\n<div className=\"forth\">\r\n<h1> <input type=\"text\" id=\"input\" autoFocus placeholder=\"Enter City Name\" onChange={onInput} /><button id=\"listen\" onClick={VoiceRun}><i className=\"fas fa-microphone\"></i></button></h1>\r\n</div>\r\n</div>\r\n\r\n</div>\r\n\r\n</>)\r\n\r\n}\r\n\r\n\r\n\r\nexport default Weather;","// import logo from './logo.svg';\n// import Input from './Components/Input'\nimport './App.css';\n// import Home from './Components/Home';\n// import User from './Components/User';\n// import {Route,Switch} from 'react-router-dom';\nimport Weather from './Weather'\n\nfunction App() {\n  return (\n    // <Input/>\n    <>\n    {/* <Switch>\n      <Route exact path=\"/\" component={Home}/>\n      <Route exact path=\"/user/:name/:lname\" component={User}/>\n    </Switch> */}\n    <Weather/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode></BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}